"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var DirectLineExport = _interopRequireWildcard(require("./directLine"));

test("#setConnectionStatusFallback", function () {
  var DirectLine = DirectLineExport.DirectLine;
  expect((0, _typeof2["default"])(DirectLine.prototype.setConnectionStatusFallback)).toBe("function");
  var setConnectionStatusFallback = DirectLine.prototype.setConnectionStatusFallback;
  var testFallback = setConnectionStatusFallback(0, 1);
  var idx = 4;

  while (idx--) {
    expect(testFallback(0)).toBe(0);
  } // fallback will be triggered


  expect(testFallback(0)).toBe(1);
  idx = 4;

  while (idx--) {
    expect(testFallback(0)).toBe(0);
  }

  expect(testFallback(0)).toBe(1);
});
describe("#commonHeaders", function () {
  var botAgent = "DirectLine/3.0 (directlinejs; custom-bot-agent)";
  var botConnection;
  beforeEach(function () {
    undefined = "test-version";
    var DirectLine = DirectLineExport.DirectLine;
    botConnection = new DirectLine({
      token: "secret-token",
      botAgent: "custom-bot-agent"
    });
  });
  test('appends browser user agent when in a browser', function () {
    // @ts-ignore
    expect(botConnection.commonHeaders()).toEqual({
      "Authorization": "Bearer secret-token",
      "x-ms-bot-agent": botAgent
    });
  });
  test.skip('appends node environment agent when in node', function () {
    // @ts-ignore
    delete window.navigator; // @ts-ignore

    var os = require('os');

    var _process = process,
        arch = _process.arch,
        platform = _process.platform,
        version = _process.version; // @ts-ignore

    expect(botConnection.commonHeaders()).toEqual({
      "Authorization": "Bearer secret-token",
      "User-Agent": "".concat(botAgent, " (Node.js,Version=").concat(version, "; ").concat(platform, " ").concat(os.release(), "; ").concat(arch, ")"),
      "x-ms-bot-agent": botAgent
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kaXJlY3RMaW5lLnRlc3QudHMiXSwibmFtZXMiOlsidGVzdCIsIkRpcmVjdExpbmUiLCJEaXJlY3RMaW5lRXhwb3J0IiwiZXhwZWN0IiwicHJvdG90eXBlIiwic2V0Q29ubmVjdGlvblN0YXR1c0ZhbGxiYWNrIiwidG9CZSIsInRlc3RGYWxsYmFjayIsImlkeCIsImRlc2NyaWJlIiwiYm90QWdlbnQiLCJib3RDb25uZWN0aW9uIiwiYmVmb3JlRWFjaCIsInRva2VuIiwiY29tbW9uSGVhZGVycyIsInRvRXF1YWwiLCJza2lwIiwid2luZG93IiwibmF2aWdhdG9yIiwib3MiLCJyZXF1aXJlIiwicHJvY2VzcyIsImFyY2giLCJwbGF0Zm9ybSIsInZlcnNpb24iLCJyZWxlYXNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQVlBQSxJQUFJLENBQUMsOEJBQUQsRUFBaUMsWUFBTTtBQUFBLE1BQy9CQyxVQUQrQixHQUNoQkMsZ0JBRGdCLENBQy9CRCxVQUQrQjtBQUV2Q0UsRUFBQUEsTUFBTSwwQkFBUUYsVUFBVSxDQUFDRyxTQUFYLENBQXFCQywyQkFBN0IsRUFBTixDQUFnRUMsSUFBaEUsQ0FBcUUsVUFBckU7QUFGdUMsTUFHL0JELDJCQUgrQixHQUdDSixVQUFVLENBQUNHLFNBSFosQ0FHL0JDLDJCQUgrQjtBQUl2QyxNQUFNRSxZQUFZLEdBQUdGLDJCQUEyQixDQUFDLENBQUQsRUFBSSxDQUFKLENBQWhEO0FBQ0EsTUFBSUcsR0FBRyxHQUFHLENBQVY7O0FBQ0EsU0FBT0EsR0FBRyxFQUFWLEVBQWM7QUFDWkwsSUFBQUEsTUFBTSxDQUFDSSxZQUFZLENBQUMsQ0FBRCxDQUFiLENBQU4sQ0FBd0JELElBQXhCLENBQTZCLENBQTdCO0FBQ0QsR0FSc0MsQ0FTdkM7OztBQUNBSCxFQUFBQSxNQUFNLENBQUNJLFlBQVksQ0FBQyxDQUFELENBQWIsQ0FBTixDQUF3QkQsSUFBeEIsQ0FBNkIsQ0FBN0I7QUFDQUUsRUFBQUEsR0FBRyxHQUFHLENBQU47O0FBQ0EsU0FBT0EsR0FBRyxFQUFWLEVBQWM7QUFDVkwsSUFBQUEsTUFBTSxDQUFDSSxZQUFZLENBQUMsQ0FBRCxDQUFiLENBQU4sQ0FBd0JELElBQXhCLENBQTZCLENBQTdCO0FBQ0g7O0FBQ0RILEVBQUFBLE1BQU0sQ0FBQ0ksWUFBWSxDQUFDLENBQUQsQ0FBYixDQUFOLENBQXdCRCxJQUF4QixDQUE2QixDQUE3QjtBQUNILENBaEJHLENBQUo7QUFrQkFHLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFNO0FBQzdCLE1BQU1DLFFBQVEsR0FBRyxpREFBakI7QUFDQSxNQUFJQyxhQUFKO0FBRUFDLEVBQUFBLFVBQVUsQ0FBQyxZQUFNO0FBQ2IsZ0JBQXNCLGNBQXRCO0FBRGEsUUFFTFgsVUFGSyxHQUVVQyxnQkFGVixDQUVMRCxVQUZLO0FBR2JVLElBQUFBLGFBQWEsR0FBRyxJQUFJVixVQUFKLENBQWU7QUFBRVksTUFBQUEsS0FBSyxFQUFFLGNBQVQ7QUFBeUJILE1BQUFBLFFBQVEsRUFBRTtBQUFuQyxLQUFmLENBQWhCO0FBQ0gsR0FKUyxDQUFWO0FBTUFWLEVBQUFBLElBQUksQ0FBQyw4Q0FBRCxFQUFpRCxZQUFNO0FBQ3ZEO0FBQ0FHLElBQUFBLE1BQU0sQ0FBQ1EsYUFBYSxDQUFDRyxhQUFkLEVBQUQsQ0FBTixDQUFzQ0MsT0FBdEMsQ0FBOEM7QUFDMUMsdUJBQWlCLHFCQUR5QjtBQUUxQyx3QkFBa0JMO0FBRndCLEtBQTlDO0FBSUgsR0FORyxDQUFKO0FBUUFWLEVBQUFBLElBQUksQ0FBQ2dCLElBQUwsQ0FBVSw2Q0FBVixFQUF5RCxZQUFNO0FBQzNEO0FBQ0EsV0FBT0MsTUFBTSxDQUFDQyxTQUFkLENBRjJELENBRzNEOztBQUNBLFFBQU1DLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBSjJELG1CQUt2QkMsT0FMdUI7QUFBQSxRQUtuREMsSUFMbUQsWUFLbkRBLElBTG1EO0FBQUEsUUFLN0NDLFFBTDZDLFlBSzdDQSxRQUw2QztBQUFBLFFBS25DQyxPQUxtQyxZQUtuQ0EsT0FMbUMsRUFPM0Q7O0FBQ0FyQixJQUFBQSxNQUFNLENBQUNRLGFBQWEsQ0FBQ0csYUFBZCxFQUFELENBQU4sQ0FBc0NDLE9BQXRDLENBQThDO0FBQzFDLHVCQUFpQixxQkFEeUI7QUFFMUMsOEJBQWlCTCxRQUFqQiwrQkFBOENjLE9BQTlDLGVBQTBERCxRQUExRCxjQUFzRUosRUFBRSxDQUFDTSxPQUFILEVBQXRFLGVBQXVGSCxJQUF2RixNQUYwQztBQUcxQyx3QkFBa0JaO0FBSHdCLEtBQTlDO0FBS0gsR0FiRDtBQWNILENBaENPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBEaXJlY3RMaW5lRXhwb3J0IGZyb20gXCIuL2RpcmVjdExpbmVcIjtcblxuZGVjbGFyZSB2YXIgcHJvY2Vzczoge1xuICAgIGFyY2g6IHN0cmluZztcbiAgICBlbnY6IHtcbiAgICAgICAgVkVSU0lPTjogc3RyaW5nO1xuICAgIH07XG4gICAgcGxhdGZvcm06IHN0cmluZztcbiAgICByZWxlYXNlOiBzdHJpbmc7XG4gICAgdmVyc2lvbjogc3RyaW5nO1xufTtcblxudGVzdChcIiNzZXRDb25uZWN0aW9uU3RhdHVzRmFsbGJhY2tcIiwgKCkgPT4ge1xuICAgIGNvbnN0IHsgRGlyZWN0TGluZSB9ID0gRGlyZWN0TGluZUV4cG9ydDtcbiAgICBleHBlY3QodHlwZW9mIERpcmVjdExpbmUucHJvdG90eXBlLnNldENvbm5lY3Rpb25TdGF0dXNGYWxsYmFjaykudG9CZShcImZ1bmN0aW9uXCIpXG4gICAgY29uc3QgeyBzZXRDb25uZWN0aW9uU3RhdHVzRmFsbGJhY2sgfSA9IERpcmVjdExpbmUucHJvdG90eXBlO1xuICAgIGNvbnN0IHRlc3RGYWxsYmFjayA9IHNldENvbm5lY3Rpb25TdGF0dXNGYWxsYmFjaygwLCAxKTtcbiAgICBsZXQgaWR4ID0gNDtcbiAgICB3aGlsZSAoaWR4LS0pIHtcbiAgICAgIGV4cGVjdCh0ZXN0RmFsbGJhY2soMCkpLnRvQmUoMCk7XG4gICAgfVxuICAgIC8vIGZhbGxiYWNrIHdpbGwgYmUgdHJpZ2dlcmVkXG4gICAgZXhwZWN0KHRlc3RGYWxsYmFjaygwKSkudG9CZSgxKTtcbiAgICBpZHggPSA0O1xuICAgIHdoaWxlIChpZHgtLSkge1xuICAgICAgICBleHBlY3QodGVzdEZhbGxiYWNrKDApKS50b0JlKDApO1xuICAgIH1cbiAgICBleHBlY3QodGVzdEZhbGxiYWNrKDApKS50b0JlKDEpO1xufSk7XG5cbmRlc2NyaWJlKFwiI2NvbW1vbkhlYWRlcnNcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGJvdEFnZW50ID0gXCJEaXJlY3RMaW5lLzMuMCAoZGlyZWN0bGluZWpzOyBjdXN0b20tYm90LWFnZW50KVwiO1xuICAgIGxldCBib3RDb25uZWN0aW9uO1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICAgIHByb2Nlc3MuZW52LlZFUlNJT04gPSBcInRlc3QtdmVyc2lvblwiO1xuICAgICAgICBjb25zdCB7IERpcmVjdExpbmUgfSA9IERpcmVjdExpbmVFeHBvcnQ7XG4gICAgICAgIGJvdENvbm5lY3Rpb24gPSBuZXcgRGlyZWN0TGluZSh7IHRva2VuOiBcInNlY3JldC10b2tlblwiLCBib3RBZ2VudDogXCJjdXN0b20tYm90LWFnZW50XCIgfSk7XG4gICAgfSk7XG5cbiAgICB0ZXN0KCdhcHBlbmRzIGJyb3dzZXIgdXNlciBhZ2VudCB3aGVuIGluIGEgYnJvd3NlcicsICgpID0+IHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBleHBlY3QoYm90Q29ubmVjdGlvbi5jb21tb25IZWFkZXJzKCkpLnRvRXF1YWwoe1xuICAgICAgICAgICAgXCJBdXRob3JpemF0aW9uXCI6IFwiQmVhcmVyIHNlY3JldC10b2tlblwiLFxuICAgICAgICAgICAgXCJ4LW1zLWJvdC1hZ2VudFwiOiBib3RBZ2VudFxuICAgICAgICB9KTtcbiAgICB9KVxuXG4gICAgdGVzdC5za2lwKCdhcHBlbmRzIG5vZGUgZW52aXJvbm1lbnQgYWdlbnQgd2hlbiBpbiBub2RlJywgKCkgPT4ge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGRlbGV0ZSB3aW5kb3cubmF2aWdhdG9yXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuICAgICAgICBjb25zdCB7IGFyY2gsIHBsYXRmb3JtLCB2ZXJzaW9uIH0gPSBwcm9jZXNzO1xuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgZXhwZWN0KGJvdENvbm5lY3Rpb24uY29tbW9uSGVhZGVycygpKS50b0VxdWFsKHtcbiAgICAgICAgICAgIFwiQXV0aG9yaXphdGlvblwiOiBcIkJlYXJlciBzZWNyZXQtdG9rZW5cIixcbiAgICAgICAgICAgIFwiVXNlci1BZ2VudFwiOiBgJHtib3RBZ2VudH0gKE5vZGUuanMsVmVyc2lvbj0ke3ZlcnNpb259OyAke3BsYXRmb3JtfSAke29zLnJlbGVhc2UoKX07ICR7YXJjaH0pYCxcbiAgICAgICAgICAgIFwieC1tcy1ib3QtYWdlbnRcIjogYm90QWdlbnRcbiAgICAgICAgfSk7XG4gICAgfSlcbn0pO1xuIl19